name: "üöÄ Enterprise CI/CD: Gigsy Docker Pipeline"

on:
  # Pull Requests to master ‚Üí Build + Test (No deployment)
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened, ready_for_review]

  # Push to master ‚Üí Development deployment
  # Push to main ‚Üí Production deployment
  push:
    branches: [master, main]

  # Manual trigger for emergency deployments
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod
      deploy_commit:
        description: "Specific commit SHA to deploy (optional)"
        required: false
        type: string

# Prevent concurrent builds on same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Minimal required permissions (least privilege)
permissions:
  contents: read
  packages: write
  pull-requests: write
  checks: write
  security-events: write
  id-token: write # For OIDC

env:
  # üè¢ Enterprise Docker Registry Configuration
  REGISTRY: docker.io
  IMAGE_REPOSITORY: mostafayaser/gigsy_digitopia2025

  # üìä Build metadata
  COMMIT_SHA_SHORT: ${{ github.sha }}
  BUILD_DATE: ${{ github.run_number }}

  # üîß Build configuration
  NODE_VERSION: "18"
  PNPM_VERSION: "9.12.1"

  # üîç Testing configuration
  JEST_TIMEOUT: "30000"
  TEST_COVERAGE_THRESHOLD: "80"

  # üê≥ Docker build configuration
  DOCKER_BUILDKIT: "1"
  BUILDX_NO_DEFAULT_ATTESTATIONS: "1"

  # üöÄ Deployment configuration
  DEV_ENVIRONMENT_URL: "https://dev-gigsy.digitopia.com"
  PROD_ENVIRONMENT_URL: "https://gigsy.digitopia.com"

jobs:
  # ================================================================
  # üß™ VALIDATION PHASE: Tests, Linting, Security
  # ================================================================
  validate:
    name: "üîç Code Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      build-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: "üìÅ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "üì¶ Setup pnpm"
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: "‚ö° Setup Node.js with Cache"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: "üîë Generate Cache Key"
        id: cache-key
        run: |
          echo "key=gigsy-build-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: "üì• Install Dependencies"
        run: pnpm install --frozen-lockfile

      - name: "üîß TypeScript Type Checking"
        run: pnpm run typecheck

      - name: "üß™ Run Unit Tests (Jest)"
        run: pnpm run test:ci

      - name: "üìä Upload Test Coverage"
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-${{ github.sha }}
          path: coverage/
          retention-days: 7

      - name: "üéØ ESLint Code Quality"
        run: pnpm run lint

      - name: "üíÖ Prettier Format Check"
        run: pnpm run format:check

      - name: "üèóÔ∏è Next.js Build Verification"
        run: pnpm run build
        env:
          NODE_ENV: production

      - name: "üíæ Upload Build Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build-${{ github.sha }}
          path: |
            .next
            public
          retention-days: 1

  # ================================================================
  # üîí SECURITY PHASE: Dependency & Supply Chain Security
  # ================================================================
  security-audit:
    name: "üîí Security Audit"
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 10
    steps:
      - name: "üìÅ Checkout Repository"
        uses: actions/checkout@v4

      - name: "üîç Dependency Review (PR Only)"
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'
        with:
          fail-on-severity: moderate
          comment-summary-in-pr: true

      - name: "üì¶ Setup pnpm"
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: "‚ö° Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: "üì• Install Dependencies"
        run: pnpm install --frozen-lockfile

      - name: "üõ°Ô∏è Vulnerability Audit"
        run: pnpm audit --audit-level moderate

  # ================================================================
  # üê≥ DOCKER BUILD PHASE: Multi-Architecture Image Building
  # ================================================================
  docker-build:
    name: "üê≥ Docker Build & Push"
    runs-on: ubuntu-latest
    needs: [validate, security-audit]
    timeout-minutes: 30
    outputs:
      # üè∑Ô∏è Image tags for downstream jobs
      image-digest: ${{ steps.build.outputs.digest }}
      commit-tag: ${{ steps.tags.outputs.commit-tag }}
      environment-tag: ${{ steps.tags.outputs.environment-tag }}
      pr-tag: ${{ steps.tags.outputs.pr-tag }}
      image-size: ${{ steps.build.outputs.metadata }}
    steps:
      - name: "üìÅ Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "üîß Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: "üîë Login to Docker Hub"
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "üè∑Ô∏è Calculate Image Tags"
        id: tags
        run: |
          # üìå Immutable commit-based tag (always created)
          COMMIT_SHA_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
          COMMIT_TAG="${{ env.IMAGE_REPOSITORY }}:${COMMIT_SHA_SHORT}"
          echo "commit-tag=${COMMIT_TAG}" >> $GITHUB_OUTPUT
          echo "üì¶ Immutable tag: ${COMMIT_TAG}"

          # üéØ Environment-specific mutable tags
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/master" ]; then
            ENV_TAG="${{ env.IMAGE_REPOSITORY }}:dev"
            echo "environment-tag=${ENV_TAG}" >> $GITHUB_OUTPUT
            echo "üîÑ Development build: ${ENV_TAG}"
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENV_TAG="${{ env.IMAGE_REPOSITORY }}:prod"
            echo "environment-tag=${ENV_TAG}" >> $GITHUB_OUTPUT
            echo "üöÄ Production build: ${ENV_TAG}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_TAG="${{ env.IMAGE_REPOSITORY }}:pr-${{ github.event.number }}"
            echo "pr-tag=${PR_TAG}" >> $GITHUB_OUTPUT
            echo "üß™ PR build: ${PR_TAG}"
          fi

          # Debug output
          echo "Debug output:"
          echo "- COMMIT_SHA_SHORT: ${COMMIT_SHA_SHORT}"
          echo "- COMMIT_TAG: ${COMMIT_TAG}"
          echo "- ENV_TAG: ${ENV_TAG:-not_set}"
          echo "- PR_TAG: ${PR_TAG:-not_set}"

      - name: "üî® Build and Push Docker Image"
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.tags.outputs.commit-tag }}${{ steps.tags.outputs.environment-tag && format(',{0}', steps.tags.outputs.environment-tag) || '' }}${{ steps.tags.outputs.pr-tag && format(',{0}', steps.tags.outputs.pr-tag) || '' }}
          labels: |
            org.opencontainers.image.title=Gigsy
            org.opencontainers.image.description=Enterprise Next.js Application for Gigsy Platform
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.vendor=Gigsy Team
            org.opencontainers.image.licenses=MIT
            gigsy.build.number=${{ github.run_number }}
            gigsy.build.trigger=${{ github.event_name }}
            gigsy.build.branch=${{ github.ref_name }}
            gigsy.commit.sha=${{ github.sha }}
            gigsy.commit.short=$(echo ${{ github.sha }} | cut -c1-7)
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ github.event.head_commit.timestamp }}
            VERSION=${{ github.ref_name }}
            REVISION=${{ github.sha }}
            BUILD_NUMBER=${{ github.run_number }}

      - name: "üìã Generate SBOM (Software Bill of Materials)"
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.tags.outputs.commit-tag }}
          format: spdx-json
          output-file: gigsy-sbom-${{ github.sha }}.spdx.json

      - name: "üì§ Upload SBOM Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: gigsy-sbom-${{ github.sha }}.spdx.json
          retention-days: 90 # Extended retention for compliance

      - name: "üîç Debug Image Tags"
        run: |
          echo "=== Debug Information ==="
          echo "Commit SHA: ${{ github.sha }}"
          echo "Short SHA: $(echo ${{ github.sha }} | cut -c1-7)"
          echo "Repository: ${{ env.IMAGE_REPOSITORY }}"
          echo ""
          echo "=== Generated Tags ==="
          echo "Commit tag: ${{ steps.tags.outputs.commit-tag }}"
          echo "Environment tag: ${{ steps.tags.outputs.environment-tag }}"
          echo "PR tag: ${{ steps.tags.outputs.pr-tag }}"
          echo ""
          echo "=== Validation ==="
          if [ -z "${{ steps.tags.outputs.commit-tag }}" ]; then
            echo "‚ùå ERROR: commit-tag is empty!"
            exit 1
          else
            echo "‚úÖ commit-tag is valid: ${{ steps.tags.outputs.commit-tag }}"
          fi

      - name: "üìä Image Build Summary"
        run: |
          echo "### üê≥ Docker Image Built Successfully" >> $GITHUB_STEP_SUMMARY
          echo "| Attribute | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Repository** | \`${{ env.IMAGE_REPOSITORY }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit Tag** | \`$(echo ${{ github.sha }} | cut -c1-7)\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Platforms** | \`linux/amd64, linux/arm64\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Number** | \`${{ github.run_number }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger** | \`${{ github.event_name }}\` |" >> $GITHUB_STEP_SUMMARY

  # ================================================================
  # üîç SECURITY SCANNING: Container Image Vulnerability Assessment
  # ================================================================
  security-scan-image:
    name: "üîç Image Security Scan"
    runs-on: ubuntu-latest
    needs: docker-build
    timeout-minutes: 15
    permissions:
      security-events: write
    steps:
      - name: "ÔøΩ Debug Image Reference"
        run: |
          echo "Debug: Image to scan = ${{ needs.docker-build.outputs.commit-tag }}"
          if [ -z "${{ needs.docker-build.outputs.commit-tag }}" ]; then
            echo "ERROR: commit-tag output is empty!"
            exit 1
          fi

      - name: "ÔøΩüõ°Ô∏è Run Trivy Vulnerability Scanner (SARIF)"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.docker-build.outputs.commit-tag }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: "üì§ Upload Trivy Results to GitHub Security"
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: "‚ö†Ô∏è Critical Vulnerability Check"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.docker-build.outputs.commit-tag }}
          format: "table"
          severity: "CRITICAL,HIGH"
          exit-code: "1" # Fail on critical vulnerabilities
          ignore-unfixed: true

      - name: "üìä Security Scan Summary"
        if: always()
        run: |
          echo "### üîç Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Scanned**: \`${{ needs.docker-build.outputs.commit-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Scanner**: Trivy (Latest)" >> $GITHUB_STEP_SUMMARY
          echo "- **Severity Threshold**: CRITICAL, HIGH" >> $GITHUB_STEP_SUMMARY
          echo "- **SARIF Report**: Uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY

  # ================================================================
  # üöÄ DEPLOYMENT ORCHESTRATION: Environment-Specific Deployments
  # ================================================================
  deploy-dev:
    name: "üîÑ Deploy to Development"
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan-image]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment:
      name: development
      url: https://dev-gigsy.digitopia.com
    timeout-minutes: 10
    steps:
      - name: "üöÄ Development Deployment"
        run: |
          echo "üîÑ Deploying to Development Environment"
          echo "üì¶ Image: ${{ needs.docker-build.outputs.commit-tag }}"
          echo "üéØ Environment: development"
          echo "üåê URL: https://dev-gigsy.digitopia.com"

          # TODO: Add actual deployment commands here
          # Example: kubectl set image deployment/gigsy-app gigsy=${{ needs.docker-build.outputs.commit-tag }}
          # Example: helm upgrade gigsy ./helm-chart --set image.tag=$(echo ${{ github.sha }} | cut -c1-7)

      - name: "‚úÖ Development Deployment Summary"
        run: |
          echo "### üîÑ Development Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Development" >> $GITHUB_STEP_SUMMARY  
          echo "- **Image**: \`${{ needs.docker-build.outputs.commit-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://dev-gigsy.digitopia.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY

  deploy-prod:
    name: "üöÄ Deploy to Production"
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan-image]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://gigsy.digitopia.com
    timeout-minutes: 15
    steps:
      - name: "üöÄ Production Deployment"
        run: |
          echo "üöÄ Deploying to Production Environment"
          echo "üì¶ Image: ${{ needs.docker-build.outputs.commit-tag }}"
          echo "üéØ Environment: production"
          echo "üåê URL: https://gigsy.digitopia.com"
          echo "‚ö†Ô∏è  Production deployment requires manual approval"

          # TODO: Add actual production deployment commands here
          # Example: kubectl set image deployment/gigsy-app gigsy=${{ needs.docker-build.outputs.commit-tag }}
          # Example: helm upgrade gigsy ./helm-chart --set image.tag=$(echo ${{ github.sha }} | cut -c1-7)

      - name: "‚úÖ Production Deployment Summary"
        run: |
          echo "### üöÄ Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`${{ needs.docker-build.outputs.commit-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://gigsy.digitopia.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY

  # ================================================================
  # üìä FINAL REPORTING: Comprehensive Pipeline Summary
  # ================================================================
  pipeline-summary:
    name: "üìä Pipeline Summary"
    runs-on: ubuntu-latest
    needs: [validate, security-audit, docker-build, security-scan-image]
    if: always()
    timeout-minutes: 5
    steps:
      - name: "üìã Generate Pipeline Report"
        run: |
          # Determine overall pipeline status
          if [ "${{ needs.validate.result }}" = "success" ] && \
             [ "${{ needs.security-audit.result }}" = "success" ] && \
             [ "${{ needs.docker-build.result }}" = "success" ] && \
             [ "${{ needs.security-scan-image.result }}" = "success" ]; then
            echo "PIPELINE_STATUS=‚úÖ SUCCESS" >> $GITHUB_ENV
            echo "PIPELINE_EMOJI=üéâ" >> $GITHUB_ENV
          else
            echo "PIPELINE_STATUS=‚ùå FAILED" >> $GITHUB_ENV  
            echo "PIPELINE_EMOJI=üí•" >> $GITHUB_ENV
          fi

      - name: "üìä Comprehensive Pipeline Summary"
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # ${{ env.PIPELINE_EMOJI }} Gigsy CI/CD Pipeline Report

          ## üìã Pipeline Overview
          | Stage | Status | Duration |
          |-------|--------|----------|
          | üîç **Code Validation** | ${{ needs.validate.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }} | - |
          | üîí **Security Audit** | ${{ needs.security-audit.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }} | - |
          | üê≥ **Docker Build** | ${{ needs.docker-build.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }} | - |
          | üîç **Image Security** | ${{ needs.security-scan-image.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }} | - |

          ## üê≥ Docker Image Details
          | Attribute | Value |
          |-----------|-------|
          | **Repository** | `${{ env.IMAGE_REPOSITORY }}` |
          | **Commit Tag** | `$(echo ${{ github.sha }} | cut -c1-7)` |
          | **Full SHA** | `${{ github.sha }}` |
          | **Branch** | `${{ github.ref_name }}` |
          | **Build Number** | `${{ github.run_number }}` |
          | **Event** | `${{ github.event_name }}` |
          | **Platforms** | `linux/amd64, linux/arm64` |

          ## üîß Usage Commands

          ### Pull Image (Immutable)
          ```bash
          docker pull ${{ env.IMAGE_REPOSITORY }}:$(echo ${{ github.sha }} | cut -c1-7)
          ```

          ### Run Container
          ```bash
          docker run -p 3000:3000 ${{ env.IMAGE_REPOSITORY }}:$(echo ${{ github.sha }} | cut -c1-7)
          ```

          ### Kubernetes Deployment
          ```bash
          kubectl set image deployment/gigsy-app gigsy=${{ env.IMAGE_REPOSITORY }}:$(echo ${{ github.sha }} | cut -c1-7)
          ```

          ## üìà Pipeline Metrics
          - **Jest Tests**: ${{ needs.validate.result == 'success' && 'All tests passed ‚úÖ' || 'Tests failed ‚ùå' }}
          - **TypeScript**: ${{ needs.validate.result == 'success' && 'No type errors ‚úÖ' || 'Type errors found ‚ùå' }}
          - **ESLint**: ${{ needs.validate.result == 'success' && 'No linting issues ‚úÖ' || 'Linting issues found ‚ùå' }}
          - **Security**: ${{ needs.security-scan-image.result == 'success' && 'No critical vulnerabilities ‚úÖ' || 'Vulnerabilities found ‚ùå' }}
          - **Build**: ${{ needs.docker-build.result == 'success' && 'Multi-arch build successful ‚úÖ' || 'Build failed ‚ùå' }}

          ---

          **üè∑Ô∏è Tagging Strategy**: All deployments use immutable `commit-sha` tags for traceability.  
          **üìä SBOM**: Software Bill of Materials generated and stored in artifacts.  
          **üîí Security**: Images scanned with Trivy for vulnerabilities.
          EOF

      - name: "üéØ Pipeline Status Check"
        run: |
          echo "${{ env.PIPELINE_STATUS }}"
          if [ "${{ env.PIPELINE_STATUS }}" = "‚ùå FAILED" ]; then
            echo "üö® Pipeline failed - review job logs for details"
            exit 1
          else
            echo "üéâ Pipeline completed successfully!"
          fi
