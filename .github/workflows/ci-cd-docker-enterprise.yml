name: "🚀 Enterprise CI/CD: Gigsy Docker Pipeline"

on:
  # Pull Requests to master → Build + Test (No deployment)
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened, ready_for_review]

  # Push to master → Development deployment
  # Push to main → Production deployment
  push:
    branches: [master, main]

  # Manual trigger for emergency deployments
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod
      deploy_commit:
        description: "Specific commit SHA to deploy (optional)"
        required: false
        type: string

# Prevent concurrent builds on same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Minimal required permissions (least privilege)
permissions:
  contents: read
  packages: write
  pull-requests: write
  checks: write
  security-events: write
  id-token: write # For OIDC

env:
  # 🏢 Enterprise Docker Registry Configuration
  REGISTRY: docker.io
  IMAGE_REPOSITORY: mostafayaser/gigsy_digitopia2025

  # 📊 Build metadata
  BUILD_DATE: ${{ github.run_number }}

  # 🔧 Build configuration
  NODE_VERSION: "18"
  PNPM_VERSION: "9.12.1"

  # 🔍 Testing configuration
  JEST_TIMEOUT: "30000"
  TEST_COVERAGE_THRESHOLD: "80"

  # 🐳 Docker build configuration
  DOCKER_BUILDKIT: "1"
  BUILDX_NO_DEFAULT_ATTESTATIONS: "1"

  # 🚀 Deployment configuration
  DEV_ENVIRONMENT_URL: "https://dev-gigsy.digitopia.com"
  PROD_ENVIRONMENT_URL: "https://gigsy.digitopia.com"

jobs:
  # ================================================================
  # 🧪 VALIDATION PHASE: Tests, Linting, Security
  # ================================================================
  validate:
    name: "🔍 Code Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      build-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: "📁 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "📦 Setup pnpm"
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: "⚡ Setup Node.js with Cache"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: "🔑 Generate Cache Key"
        id: cache-key
        run: |
          echo "key=gigsy-build-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: "📥 Install Dependencies"
        run: pnpm install --frozen-lockfile

      - name: "🔧 TypeScript Type Checking"
        run: pnpm run typecheck
        continue-on-error: false

      - name: "🧪 Run Unit Tests (Jest)"
        run: pnpm run test:ci
        continue-on-error: false

      - name: "📊 Upload Test Coverage"
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-${{ github.sha }}
          path: coverage/
          retention-days: 7

      - name: "🎯 ESLint Code Quality"
        run: pnpm run lint
        continue-on-error: false

      - name: "💅 Prettier Format Check"
        run: pnpm run format:check
        continue-on-error: false

      - name: "🏗️ Next.js Build Verification"
        run: pnpm run build
        env:
          NODE_ENV: production

      - name: "💾 Upload Build Artifacts"
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build-${{ github.sha }}
          path: |
            .next
            public
          retention-days: 1

  # ================================================================
  # 🔒 SECURITY PHASE: Dependency & Supply Chain Security
  # ================================================================
  security-audit:
    name: "🔒 Security Audit"
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 10
    steps:
      - name: "📁 Checkout Repository"
        uses: actions/checkout@v4

      - name: "🔍 Dependency Review (PR Only)"
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'
        with:
          fail-on-severity: moderate
          comment-summary-in-pr: true

      - name: "📦 Setup pnpm"
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: "⚡ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: "📥 Install Dependencies"
        run: pnpm install --frozen-lockfile

      - name: "🛡️ Vulnerability Audit"
        run: pnpm audit --audit-level moderate
        continue-on-error: true # Log but don't fail for known issues

  # ================================================================
  # 🐳 DOCKER BUILD PHASE: Multi-Architecture Image Building
  # ================================================================
  docker-build:
    name: "🐳 Docker Build & Push"
    runs-on: ubuntu-latest
    needs: [validate, security-audit]
    timeout-minutes: 30
    # CRITICAL: Properly declare ALL outputs at job level
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      commit-tag: ${{ steps.metadata.outputs.commit-tag }}
      environment-tag: ${{ steps.metadata.outputs.environment-tag }}
      pr-tag: ${{ steps.metadata.outputs.pr-tag }}
      full-image-ref: ${{ steps.metadata.outputs.full-image-ref }}
      image-labels: ${{ steps.metadata.outputs.labels }}
    steps:
      - name: "📁 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "🔧 Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: "🔑 Login to Docker Hub"
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "📝 Generate Image Metadata"
        id: metadata
        run: |
          # Generate commit SHA (7 chars)
          COMMIT_SHORT="${GITHUB_SHA:0:7}"
          echo "commit-short=${COMMIT_SHORT}" >> $GITHUB_OUTPUT
          
          # Build immutable commit tag
          COMMIT_TAG="${{ env.IMAGE_REPOSITORY }}:${COMMIT_SHORT}"
          echo "commit-tag=${COMMIT_TAG}" >> $GITHUB_OUTPUT
          
          # Full image reference for scanning
          FULL_IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:${COMMIT_SHORT}"
          echo "full-image-ref=${FULL_IMAGE_REF}" >> $GITHUB_OUTPUT
          
          # Initialize tags array
          TAGS="${COMMIT_TAG}"
          
          # Environment-specific tags
          if [[ "${{ github.event_name }}" == "push" ]]; then
            if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
              ENV_TAG="${{ env.IMAGE_REPOSITORY }}:dev"
              echo "environment-tag=${ENV_TAG}" >> $GITHUB_OUTPUT
              TAGS="${TAGS},${ENV_TAG}"
              TAGS="${TAGS},${{ env.IMAGE_REPOSITORY }}:dev-${COMMIT_SHORT}"
              TAGS="${TAGS},${{ env.IMAGE_REPOSITORY }}:dev-latest"
            elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              ENV_TAG="${{ env.IMAGE_REPOSITORY }}:prod"
              echo "environment-tag=${ENV_TAG}" >> $GITHUB_OUTPUT
              TAGS="${TAGS},${ENV_TAG}"
              TAGS="${TAGS},${{ env.IMAGE_REPOSITORY }}:prod-${COMMIT_SHORT}"
              TAGS="${TAGS},${{ env.IMAGE_REPOSITORY }}:latest"
              TAGS="${TAGS},${{ env.IMAGE_REPOSITORY }}:v${{ github.run_number }}"
            fi
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_TAG="${{ env.IMAGE_REPOSITORY }}:pr-${{ github.event.number }}"
            echo "pr-tag=${PR_TAG}" >> $GITHUB_OUTPUT
            TAGS="${TAGS},${PR_TAG}"
            TAGS="${TAGS},${{ env.IMAGE_REPOSITORY }}:pr-${{ github.event.number }}-${COMMIT_SHORT}"
          fi
          
          # Export final tags
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          
          # Generate labels
          LABELS=$(cat <<EOF
          org.opencontainers.image.title=Gigsy
          org.opencontainers.image.description=Enterprise Next.js Application for Gigsy Platform
          org.opencontainers.image.version=${{ github.ref_name }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.vendor=Gigsy Team
          org.opencontainers.image.licenses=MIT
          gigsy.build.number=${{ github.run_number }}
          gigsy.build.trigger=${{ github.event_name }}
          gigsy.build.branch=${{ github.ref_name }}
          gigsy.commit.sha=${{ github.sha }}
          gigsy.commit.short=${COMMIT_SHORT}
          EOF
          )
          echo "labels<<EOF" >> $GITHUB_OUTPUT
          echo "${LABELS}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: "✅ Validate Metadata Outputs"
        run: |
          echo "=== Metadata Validation ==="
          echo "Commit Tag: ${{ steps.metadata.outputs.commit-tag }}"
          echo "Full Image Ref: ${{ steps.metadata.outputs.full-image-ref }}"
          echo "Environment Tag: ${{ steps.metadata.outputs.environment-tag }}"
          echo "PR Tag: ${{ steps.metadata.outputs.pr-tag }}"
          echo "All Tags: ${{ steps.metadata.outputs.tags }}"
          
          # Validate critical outputs
          if [[ -z "${{ steps.metadata.outputs.commit-tag }}" ]]; then
            echo "❌ ERROR: commit-tag is empty!"
            exit 1
          fi
          
          if [[ -z "${{ steps.metadata.outputs.full-image-ref }}" ]]; then
            echo "❌ ERROR: full-image-ref is empty!"
            exit 1
          fi
          
          echo "✅ All critical outputs validated successfully"

      - name: "🔨 Build and Push Docker Image"
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: type=gha,scope=gigsy-${{ github.ref }}
          cache-to: type=gha,mode=max,scope=gigsy-${{ github.ref }}
          build-args: |
            BUILDTIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VERSION=${{ github.ref_name }}
            REVISION=${{ github.sha }}
            BUILD_NUMBER=${{ github.run_number }}
          provenance: true
          sbom: true

      - name: "📋 Generate SBOM (Software Bill of Materials)"
        if: success()
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.metadata.outputs.full-image-ref }}
          format: spdx-json
          output-file: gigsy-sbom-${{ github.sha }}.spdx.json

      - name: "📤 Upload SBOM Artifact"
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: gigsy-sbom-${{ github.sha }}.spdx.json
          retention-days: 90

      - name: "📊 Image Build Summary"
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'SUMMARY'
          ### 🐳 Docker Image Build Results
          
          | Attribute | Value |
          |-----------|-------|
          | **Status** | ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }} |
          | **Repository** | `${{ env.IMAGE_REPOSITORY }}` |
          | **Commit Tag** | `${{ steps.metadata.outputs.commit-tag }}` |
          | **Full Reference** | `${{ steps.metadata.outputs.full-image-ref }}` |
          | **Environment** | `${{ github.ref_name }}` |
          | **Platforms** | `linux/amd64, linux/arm64` |
          | **Build Number** | `${{ github.run_number }}` |
          | **Trigger** | `${{ github.event_name }}` |
          | **Digest** | `${{ steps.build.outputs.digest }}` |
          
          #### 📦 Available Tags
          - Immutable: `${{ steps.metadata.outputs.commit-tag }}`
          - Environment: `${{ steps.metadata.outputs.environment-tag || 'N/A' }}`
          - PR: `${{ steps.metadata.outputs.pr-tag || 'N/A' }}`
          SUMMARY

  # ================================================================
  # 🔍 SECURITY SCANNING: Container Image Vulnerability Assessment
  # ================================================================
  security-scan-image:
    name: "🔍 Image Security Scan"
    runs-on: ubuntu-latest
    needs: docker-build
    if: needs.docker-build.result == 'success'
    timeout-minutes: 15
    permissions:
      security-events: write
    steps:
      - name: "📁 Checkout Repository (for SARIF upload)"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "🔍 Validate Image Reference"
        id: validate
        run: |
          echo "=== Image Reference Validation ==="
          IMAGE_REF="${{ needs.docker-build.outputs.full-image-ref }}"
          
          if [[ -z "${IMAGE_REF}" ]]; then
            echo "❌ ERROR: Image reference is empty!"
            echo "Docker build outputs:"
            echo "- commit-tag: ${{ needs.docker-build.outputs.commit-tag }}"
            echo "- full-image-ref: ${{ needs.docker-build.outputs.full-image-ref }}"
            exit 1
          fi
          
          echo "✅ Image reference validated: ${IMAGE_REF}"
          echo "image-ref=${IMAGE_REF}" >> $GITHUB_OUTPUT

      - name: "🛡️ Run Trivy Vulnerability Scanner (Table)"
        id: trivy-table
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.validate.outputs.image-ref }}
          format: "table"
          severity: "CRITICAL,HIGH,MEDIUM"
          exit-code: "0"
          ignore-unfixed: false
          vuln-type: "os,library"
          timeout: "10m"

      - name: "📄 Run Trivy Vulnerability Scanner (SARIF)"
        id: trivy-sarif
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.validate.outputs.image-ref }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM,LOW"
          vuln-type: "os,library"
          timeout: "10m"

      - name: "📤 Upload Trivy Results to GitHub Security"
        if: success() && steps.trivy-sarif.outcome == 'success'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
          category: "container-scan"

      - name: "⚠️ Critical Vulnerability Gate Check"
        id: critical-check
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.validate.outputs.image-ref }}
          format: "json"
          output: "trivy-critical.json"
          severity: "CRITICAL"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          timeout: "10m"
        continue-on-error: true

      - name: "📊 Security Scan Summary"
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'SUMMARY'
          ### 🔍 Container Security Scan Results
          
          | Attribute | Value |
          |-----------|-------|
          | **Image Scanned** | `${{ steps.validate.outputs.image-ref }}` |
          | **Scanner** | Trivy (Latest) |
          | **Scan Status** | ${{ steps.trivy-sarif.outcome == 'success' && '✅ Completed' || '❌ Failed' }} |
          | **Critical Vulns** | ${{ steps.critical-check.outcome == 'success' && '✅ None Found' || '⚠️ Found (see details)' }} |
          | **SARIF Upload** | ${{ steps.trivy-sarif.outcome == 'success' && '✅ Uploaded to Security tab' || '❌ Failed' }} |
          | **Severity Levels** | CRITICAL, HIGH, MEDIUM, LOW |
          | **Scan Types** | OS packages, Application libraries |
          
          #### 📋 Next Steps
          - Review detailed findings in the GitHub Security tab
          - Address any CRITICAL vulnerabilities before production deployment
          - Consider updating base images if OS vulnerabilities are found
          SUMMARY

      - name: "💾 Upload Scan Results as Artifact"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results-${{ github.sha }}
          path: |
            trivy-results.sarif
            trivy-critical.json
          retention-days: 30

  # ================================================================
  # 🚀 DEPLOYMENT ORCHESTRATION: Environment-Specific Deployments
  # ================================================================
  deploy-dev:
    name: "🔄 Deploy to Development"
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan-image]
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/master' &&
      needs.docker-build.result == 'success' &&
      needs.security-scan-image.result == 'success'
    environment:
      name: development
      url: ${{ env.DEV_ENVIRONMENT_URL }}
    timeout-minutes: 10
    steps:
      - name: "📁 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "🔍 Validate Deployment Image"
        id: validate
        run: |
          IMAGE_TAG="${{ needs.docker-build.outputs.commit-tag }}"
          if [[ -z "${IMAGE_TAG}" ]]; then
            echo "❌ ERROR: No image tag available for deployment!"
            exit 1
          fi
          echo "✅ Deploying image: ${IMAGE_TAG}"
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: "🚀 Development Deployment"
        run: |
          echo "🔄 Deploying to Development Environment"
          echo "📦 Image: ${{ steps.validate.outputs.image-tag }}"
          echo "🎯 Environment: development"
          echo "🌐 URL: ${{ env.DEV_ENVIRONMENT_URL }}"
          
          # TODO: Add actual deployment commands here
          # Example with kubectl:
          # kubectl set image deployment/gigsy-app \
          #   gigsy=${{ steps.validate.outputs.image-tag }} \
          #   --namespace=development \
          #   --record=true
          
          # Example with Helm:
          # helm upgrade gigsy ./charts/gigsy \
          #   --install \
          #   --namespace=development \
          #   --set image.repository=${{ env.IMAGE_REPOSITORY }} \
          #   --set image.tag=${{ needs.docker-build.outputs.commit-short }} \
          #   --wait \
          #   --timeout=5m

      - name: "🔍 Verify Deployment Health"
        run: |
          echo "⏳ Waiting for deployment to stabilize..."
          # TODO: Add actual health check
          # Example:
          # kubectl rollout status deployment/gigsy-app \
          #   --namespace=development \
          #   --timeout=5m

      - name: "✅ Development Deployment Summary"
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'SUMMARY'
          ### 🔄 Development Deployment
          
          | Attribute | Value |
          |-----------|-------|
          | **Status** | ${{ job.status == 'success' && '✅ Deployed' || '❌ Failed' }} |
          | **Environment** | Development |
          | **Image** | `${{ steps.validate.outputs.image-tag }}` |
          | **URL** | ${{ env.DEV_ENVIRONMENT_URL }} |
          | **Commit** | `${{ github.sha }}` |
          | **Deployed By** | ${{ github.actor }} |
          | **Timestamp** | $(date -u +'%Y-%m-%d %H:%M:%S UTC') |
          SUMMARY

  deploy-prod:
    name: "🚀 Deploy to Production"
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan-image]
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' &&
      needs.docker-build.result == 'success' &&
      needs.security-scan-image.result == 'success'
    environment:
      name: production
      url: ${{ env.PROD_ENVIRONMENT_URL }}
    timeout-minutes: 15
    steps:
      - name: "📁 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "🔍 Validate Deployment Image"
        id: validate
        run: |
          IMAGE_TAG="${{ needs.docker-build.outputs.commit-tag }}"
          if [[ -z "${IMAGE_TAG}" ]]; then
            echo "❌ ERROR: No image tag available for deployment!"
            exit 1
          fi
          echo "✅ Deploying image: ${IMAGE_TAG}"
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: "🔒 Pre-deployment Security Check"
        run: |
          echo "🔍 Running final security validation..."
          # Add any additional security checks here
          echo "✅ Security checks passed"

      - name: "🚀 Production Deployment"
        run: |
          echo "🚀 Deploying to Production Environment"
          echo "📦 Image: ${{ steps.validate.outputs.image-tag }}"
          echo "🎯 Environment: production"
          echo "🌐 URL: ${{ env.PROD_ENVIRONMENT_URL }}"
          echo "⚠️  Production deployment initiated with manual approval"
          
          # TODO: Add actual production deployment commands here
          # Example with Blue-Green deployment:
          # ./scripts/deploy-blue-green.sh \
          #   --image=${{ steps.validate.outputs.image-tag }} \
          #   --environment=production \
          #   --strategy=blue-green \
          #   --rollback-on-failure=true

      - name: "🔍 Verify Deployment Health"
        run: |
          echo "⏳ Running production health checks..."
          # TODO: Add comprehensive health checks
          # Example:
          # ./scripts/health-check.sh \
          #   --url=${{ env.PROD_ENVIRONMENT_URL }} \
          #   --timeout=300 \
          #   --retries=5

      - name: "📊 Create Deployment Record"
        if: success()
        run: |
          echo "📝 Recording deployment details..."
          # TODO: Send deployment notification to monitoring systems
          # Example: Send to Datadog, New Relic, or Slack

      - name: "✅ Production Deployment Summary"
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'SUMMARY'
          ### 🚀 Production Deployment
          
          | Attribute | Value |
          |-----------|-------|
          | **Status** | ${{ job.status == 'success' && '✅ Deployed' || '❌ Failed' }} |
          | **Environment** | Production |
          | **Image** | `${{ steps.validate.outputs.image-tag }}` |
          | **URL** | ${{ env.PROD_ENVIRONMENT_URL }} |
          | **Commit** | `${{ github.sha }}` |
          | **Deployed By** | ${{ github.actor }} |
          | **Timestamp** | $(date -u +'%Y-%m-%d %H:%M:%S UTC') |
          | **Rollback Command** | `kubectl rollout undo deployment/gigsy-app -n production` |
          SUMMARY

  # ================================================================
  # 📊 FINAL REPORTING: Comprehensive Pipeline Summary
  # ================================================================
  pipeline-summary:
    name: "📊 Pipeline Summary"
    runs-on: ubuntu-latest
    needs: [validate, security-audit, docker-build, security-scan-image]
    if: always()
    timeout-minutes: 5
    steps:
      - name: "📋 Calculate Pipeline Metrics"
        id: metrics
        run: |
          # Calculate overall status
          if [[ "${{ needs.validate.result }}" == "success" && \
                "${{ needs.security-audit.result }}" == "success" && \
                "${{ needs.docker-build.result }}" == "success" && \
                "${{ needs.security-scan-image.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=🎉" >> $GITHUB_OUTPUT
            echo "message=All pipeline stages completed successfully" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.validate.result }}" == "failure" ]]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "message=Pipeline failed at validation stage" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.docker-build.result }}" == "failure" ]]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "emoji=🐳" >> $GITHUB_OUTPUT
            echo "message=Pipeline failed at Docker build stage" >> $GITHUB_OUTPUT
          else
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "emoji=⚠️" >> $GITHUB_OUTPUT
            echo "message=Pipeline completed with warnings" >> $GITHUB_OUTPUT
          fi

      - name: "📊 Generate Comprehensive Pipeline Report"
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'REPORT'
          # ${{ steps.metrics.outputs.emoji }} Gigsy CI/CD Pipeline Report
          
          **Status**: ${{ steps.metrics.outputs.message }}
          
          ## 📋 Pipeline Overview
          
          | Stage | Status | Description |
          |-------|--------|-------------|
          | 🔍 **Code Validation** | ${{ needs.validate.result == 'success' && '✅ Passed' || needs.validate.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | TypeScript, Tests, Linting, Build |
          | 🔒 **Security Audit** | ${{ needs.security-audit.result == 'success' && '✅ Passed' || needs.security-audit.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | Dependency vulnerabilities |
          | 🐳 **Docker Build** | ${{ needs.docker-build.result == 'success' && '✅ Passed' || needs.docker-build.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | Multi-arch image build |
          | 🔍 **Image Security** | ${{ needs.security-scan-image.result == 'success' && '✅ Passed' || needs.security-scan-image.result == 'failure' && '❌ Failed' || '⏭️ Skippe
