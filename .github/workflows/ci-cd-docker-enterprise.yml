name: "🚀 Enterprise CI/CD: Gigsy Docker Pipeline"

on:
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened, ready_for_review]

  push:
    branches: [master, main]

  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod
      deploy_commit:
        description: "Specific commit SHA to deploy (optional)"
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  pull-requests: write
  checks: write
  security-events: write
  id-token: write

env:
  REGISTRY: docker.io
  IMAGE_REPOSITORY: mostafayaser/gigsy_digitopia2025
  BUILD_DATE: ${{ github.run_number }}
  NODE_VERSION: "18"
  PNPM_VERSION: "9.12.1"
  JEST_TIMEOUT: "30000"
  TEST_COVERAGE_THRESHOLD: "80"
  DOCKER_BUILDKIT: "1"
  BUILDX_NO_DEFAULT_ATTESTATIONS: "1"
  DEV_ENVIRONMENT_URL: "https://dev-gigsy.digitopia.com"
  PROD_ENVIRONMENT_URL: "https://gigsy.digitopia.com"

jobs:
  # ==========================
  # VALIDATION
  # ==========================
  validate:
    name: "🔍 Code Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      build-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
      - id: cache-key
        run: echo "key=gigsy-build-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ github.sha }}" >> $GITHUB_OUTPUT
      - run: pnpm install --frozen-lockfile
      - run: pnpm run typecheck
      - run: pnpm run test:ci
      - uses: actions/upload-artifact@v4
        if: success()
        with:
          name: test-coverage-${{ github.sha }}
          path: coverage/
          retention-days: 7
      - run: pnpm run lint
      - run: pnpm run format:check
      - run: pnpm run build
        env:
          NODE_ENV: production
      - uses: actions/upload-artifact@v4
        if: success()
        with:
          name: nextjs-build-${{ github.sha }}
          path: |
            .next
            public
          retention-days: 1

  # ==========================
  # SECURITY AUDIT
  # ==========================
  security-audit:
    name: "🔒 Security Audit"
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      - uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'
        with:
          fail-on-severity: moderate
          comment-summary-in-pr: true
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm audit --audit-level moderate
        continue-on-error: true

  # ==========================
  # DOCKER BUILD
  # ==========================
  docker-build:
    name: "🐳 Docker Build & Push"
    runs-on: ubuntu-latest
    needs: [validate, security-audit]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - id: meta
        run: |
          COMMIT_SHORT="${GITHUB_SHA:0:7}"
          echo "commit-tag=${{ env.IMAGE_REPOSITORY }}:${COMMIT_SHORT}" >> $GITHUB_OUTPUT
      - id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.commit-tag }}

  # ==========================
  # SECURITY SCAN
  # ==========================
  security-scan-image:
    name: "🔍 Image Security Scan"
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - run: echo "Image to scan: ${{ needs.docker-build.outputs.commit-tag }}"
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.docker-build.outputs.commit-tag }}
          format: "sarif"
          output: "trivy-results.sarif"
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  # ==========================
  # PIPELINE SUMMARY (fixed)
  # ==========================
  pipeline-summary:
    name: "📊 Pipeline Summary"
    runs-on: ubuntu-latest
    needs: [validate, security-audit, docker-build, security-scan-image]
    if: always()
    steps:
      - id: metrics
        run: |
          if [[ "${{ needs.validate.result }}" == "success" && \
                "${{ needs.security-audit.result }}" == "success" && \
                "${{ needs.docker-build.result }}" == "success" && \
                "${{ needs.security-scan-image.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=🎉" >> $GITHUB_OUTPUT
            echo "message=All pipeline stages completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "message=Pipeline failed" >> $GITHUB_OUTPUT
          fi

      - name: "📊 Generate Pipeline Report"
        run: |
          echo "# ${{ steps.metrics.outputs.emoji }} Gigsy CI/CD Pipeline Report" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ steps.metrics.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Pipeline Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Validation | ${{ needs.validate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security Audit | ${{ needs.security-audit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐳 Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Security Scan | ${{ needs.security-scan-image.result }} |" >> $GITHUB_STEP_SUMMARY
